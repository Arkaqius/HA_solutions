HeaterController:
  # App definitions
  module: SmartHeating
  class: SmartHeating
  log_level: INFO

  # WAM Factors
  wam_factors:
    living_room: 2
    corridor: 2
    bathroom: 2
    entrance: 1 
    upperCorridor: 2
    wardrobe: 1
    upperBathroom: 3
    
  # Radiator Factors
  rads_factors:
    office: 2
    kidsroom: 2
    bedroom: 4
    garage: 1

  # Config
  config:
    cycle_time: 5 #[s]
    warm_flag_offset: 0.5
    frezzing_flag_offset: 0.5
    logging: True
    error_offset_update_threshold: 0.5
    force_flow_off: 4
    radiator_boost_threshold: 25
    rads_error_factor: 4
    force_burn_thres: 0
  
  # HAL
  HAL_setpoint_mapping_in:
    office_setpoint: 'input_number.sh_office_setpoint'
    kidsroom_setpoint: 'input_number.sh_kidsroom_setpoint'
    bedroom_setpoint: 'input_number.sh_bedroom_setpoint'
    garage_setpoint:  'input_number.sh_garage_setpoint'
  HAL_setpoint_mapping_out:
    office_setpoint: 'climate.office_TRV'
    kidsroom_setpoint: 'climate.kidsroom_TRV'
    bedroom_left_setpoint: 'climate.bedroom_left_TRV'
    bedroom_right_setpoint: 'climate.bedroom_right_TRV'
    garage_setpoint:  'climate.garage_TRV'
  HAL_TRV_pos:
    garage_pos: 'sensor.garage_trv_position'
    bedroomLeft_pos: 'sensor.bedroom_left_trv_position'
    bedroomRight_pos: 'sensor.bedroom_right_trv_position'
    office_pos: 'sensor.office_trv_position'
    kidsRoom_pos: 'sensor.kidsroom_trv_position'
  HAL_output:
    thermostat_setpoint: 'number.thermostat_hc1_manual_temperature'
    wam_value: 'input_number.sh_wam_offset'
    setpoint_offset: 'input_number.sh_setpoint_offset'
  HAL_inputs:
     makeWarm_flag: 'input_boolean.sh_make_warmer'
     forceFlow_flag: 'input_boolean.sh_force_flow'
     frezzing_flag: 'input_boolean.sh_frezzing'
     corridor_setpoint: 'input_number.sh_corridor_setpoint'
  HAL_errors:
      livingRoom_error: 'sensor.livingroom_temperatureerror'
      corridor_error: 'sensor.corridor_temperatureerror'
      bathroom_error: 'sensor.bathroom_temperatureerror'
      entrance_error: 'sensor.entrance_temperatureerror'
      uppercorridor_error: 'sensor.uppercorridor_temperatureerror'
      wardrobe_error: 'sensor.wardrobe_temperatureerror'
      upperbathroom_error: 'sensor.upperbathroom_temperatureerror'
      office_error: 'sensor.office_temperatureerror'
      kidsroom_error: 'sensor.kidsroom_temperatureerror'
      garage_error: 'sensor.garage_temperatureerror'
      bedroom_error: 'sensor.bedroom_temperatureerror'

DailyRoutines:
  # App definitions
  module: DailyRoutines
  class: DailyRoutines
  log_level: DEBUG
  # HMI varaibles
  turn_off_ligts_scene: scene.all_lights_off
  ww_activate: input_boolean.ww_state
  awake_state: binary_sensor.monitor_awake_state
  next_awake_time: sensor.next_awake_time

Monitor:
  # App definitions
  module: Monitor
  class: Monitor
  log_level: DEBUG
  # HMI varaibles
  ux_awake_state: input_boolean.ux_awake_state
  next_alarm_sensor: sensor.arekphone_next_alarm
  awake_state: binary_sensor.monitor_awake_state
  #Config
  reset_time: "9:00:00"
  wake_time_start: 5
  wake_time_end: 8


### DOOR CONTROLLERS START
# Detailed Help for Creating Configuration:
# 1. Module and Class (Required):
#    - module: The name of the Python module file (without .py extension) where the DoorController class is defined.
#    - class: The name of the class to instantiate, which should be DoorController in this case.
#
# 2. Logging Level (Optional):
#    - log_level: Sets the verbosity of the logs. Use DEBUG for detailed logging during development and troubleshooting.
#
# 3. Inputs:
#    - close_sensor (Optional): Entity ID of the binary sensor that indicates when the door is fully closed.
#    - open_sensor (Optional): Entity ID of the binary sensor that indicates when the door is fully open.
#    - input_button_open (Required): Entity ID of the input button used in the Home Assistant Lovelace UI to open the door.
#    - input_button_close (Required): Entity ID of the input button used in the Home Assistant Lovelace UI to close the door.
#    - external_button (Required): Entity ID of the input button mapped to a physical external button to trigger door actions.
#    - input_button_pedestrian (Optional): Entity ID of the input button used in the Home Assistant Lovelace UI to open the door for pedestrian access.
#
# 4. Outputs:
#    - door_switch (Required): Entity ID of the switch that controls the door or gate motor (usually a relay).
#    - door_status_sensor (Required): Entity ID of the sensor that represents the door status (created and managed by the app).
#    - health_status_sensor (Required): Entity ID of the sensor that represents the app's health status (created and managed by the app).
#
# 5. Calibration (Optional):
#    - timeout: Time in seconds to wait for door operation to complete before considering it a fault. Adjust this based on your door or gate's typical operation time.
#    - pedestrian_open_timeout (Optional): Time in seconds to open the gate just enough for pedestrian access.
#
# 6. Friendly Name (Required):
#    - friendly_name: A friendly name for created entities.
#
# Example Usage:
# - For a garage door with physical contact sensors, you configure both close_sensor and open_sensor.
# - For a gate without physical sensors, you can omit the sensor configurations and just use input buttons and a relay.
# - external_button can be used to map a physical button to the Home Assistant input button, allowing for physical control of the door or gate.

# Garage Door Controller Configuration
GarageDoorController:
  module: DoorController  # Specifies the module where the DoorController class is located
  class: DoorController   # Specifies the class to be instantiated
  log_level: INFO        # Sets the logging level for this app
  friendly_name: "Garage Door"  # A friendly name for the whole app to be used in Home Assistant UI

  # Inputs
  close_sensor: binary_sensor.garage_gatedoorlow_contact_contact # Physical contact sensor for closed position (Optional)
  open_sensor: binary_sensor.garage_gatedoorhigh_contact_contact # Physical contact sensor for open position (Optional)
  input_button_open: input_button.garage_open_door # Template input button for opening the door from LoveLace UI (Required)
  input_button_close: input_button.garage_close_door # Template input button for closing the door from LoveLace UI (Required)
  external_button: input_button.garage_open_door # Template input button for binding to a physical external button (Required)


  # Outputs
  door_switch: switch.sonoff_basic_relay # Physical relay to control the door motor (Required)
  door_status_sensor: sensor.garage_door_contact # Template sensor for displaying door status on LoveLace UI, auto-generated by the app (Required)
  health_status_sensor: sensor.garage_door_app_health # Template sensor for monitoring app health, auto-generated by the app (Required)

  # Calibration
  timeout: 20  # Timeout in seconds for door operation, used for diagnostics (Optional)

# External Gate Controller Configuration
ExternalGateController:
  module: DoorController  # Specifies the module where the DoorController class is located
  class: DoorController   # Specifies the class to be instantiated
  log_level: INFO        # Sets the logging level for this app
  friendly_name: "External Gate"  # A friendly name for the whole app to be used in Home Assistant UI

  # Inputs
  door_switch: switch.smart_switch_ver1_relay1 # Physical relay to control the gate motor (Required)
  input_button_open: input_button.externalgate_open_door # Template input button for opening the gate from LoveLace UI (Required)
  input_button_close: input_button.externalgate_close_door # Template input button for closing the gate from LoveLace UI (Required)
  external_button: input_button.externalgate_external_button # Template input button for binding to a physical external button (Required)
  input_button_pedestrian: input_button.externalgate_pedestrian_open # Template input button for opening the gate for pedestrian access (Optional)

  # Outputs
  door_status_sensor: sensor.externalgate_contact # Template sensor for displaying gate status on LoveLace UI, auto-generated by the app (Required)
  health_status_sensor: sensor.externalgate_app_health # Template sensor for monitoring app health, auto-generated by the app (Required)

  # Calibration
  timeout: 30  # Timeout in seconds for gate operation, used for diagnostics (Optional)
  pedestrian_open_timeout: 5  # Time in seconds to open the gate just enough for pedestrian access (Optional)

### DOOR CONTROLLERS END

SafetyFunctions:
  # App definitions
  module: SafetyFunctions
  class: SafetyFunctions
  log_level: INFO

  # General config of app
  app_config:
    faults:
      RiskyTemperature:
        name: "Unsafe temperature"
        priority: 2
        related_sms:
          - "sm_tc_1"
      RiskyTemperatureForecast:
        name: "Unsafe temperature forecast"
        priority: 3
        related_sms:
          - "sm_tc_2"

  # User specyfic config
  user_config:
    notification:
      light_entity: 'light.warning_light'
    common_entities:
      outside_temp : 'sensor.dom_temperature'
    safety_components:
      TemperatureComponent:
        - Office:
            CAL_LOW_TEMP_THRESHOLD: 18.0
            CAL_FORECAST_TIMESPAN: 2.0 # hours # app cfg
            temperature_sensor: "sensor.office_temperature"
            temperature_sensor_rate: "sensor.office_temperature_rate" # sampling_rate = 1min
            window_sensor: sensor.office_window_contact_contact